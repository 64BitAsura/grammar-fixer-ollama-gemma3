name: Docker Build and Security Scan

on:
  push:
    branches: [ main, master ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'src/**'
      - 'package*.json'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'src/**'
      - 'package*.json'
  workflow_dispatch:

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: grammar-fixer:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: 'grammar-fixer:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: 'grammar-fixer:latest'
        format: 'table'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Test Docker image
      run: |
        # Start container
        docker run -d --name test-container \
          -p 3000:3000 \
          -e OLLAMA_HOST=http://host.docker.internal:11434 \
          grammar-fixer:latest
        
        # Wait for container to be ready
        sleep 5
        
        # Test health endpoint
        curl -f http://localhost:3000/health || exit 1
        
        # Test root endpoint
        curl -f http://localhost:3000/ || exit 1
        
        # Stop container
        docker stop test-container
        docker rm test-container
        
        echo "✓ Docker image tests passed"
    
    - name: Check image size
      run: |
        SIZE=$(docker image inspect grammar-fixer:latest --format='{{.Size}}')
        SIZE_MB=$((SIZE / 1024 / 1024))
        echo "Image size: ${SIZE_MB}MB"
        if [ $SIZE_MB -gt 500 ]; then
          echo "Warning: Image size is larger than expected (${SIZE_MB}MB > 500MB)"
        fi
    
    - name: Verify security configurations
      run: |
        echo "Checking security configurations..."
        
        # Check if image runs as non-root user
        USER=$(docker run --rm grammar-fixer:latest sh -c "id -u")
        if [ "$USER" != "1001" ]; then
          echo "ERROR: Container is not running as expected non-root user (UID 1001)"
          exit 1
        fi
        echo "✓ Container runs as non-root user (UID $USER)"
        
        # Check healthcheck configuration
        HEALTHCHECK=$(docker inspect grammar-fixer:latest --format='{{.Config.Healthcheck}}')
        if [ "$HEALTHCHECK" == "<nil>" ]; then
          echo "WARNING: No healthcheck configured"
        else
          echo "✓ Healthcheck is configured"
        fi
  
  publish:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: read
    
    # Note: This job rebuilds the image to push to Docker Hub.
    # Docker layer caching (cache-from: type=gha) ensures we reuse
    # layers from the build-and-scan job, minimizing rebuild time.
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/grammar-fixer-ollama-gemma3
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Image digest
      run: echo "Image published with digest ${{ steps.meta.outputs.digest }}"
